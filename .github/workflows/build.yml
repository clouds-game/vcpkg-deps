# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - os: ubuntu-latest
          shell: bash
          vcpkg_triplet: x64-linux-mixed
        - os: macos-latest
          shell: bash
          vcpkg_triplet: arm64-osx-mixed
        - os: windows-latest
          shell: msys2 {0}
          vcpkg_triplet: x64-windows-mixed
    env:
      VCPKG_DISABLE_METRICS: 1
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg_cache
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"

    defaults:
      run:
        shell: ${{ matrix.config.shell }}

    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          msystem: UCRT64
          update: true
          # install: git mingw-w64-ucrt-x86_64-gcc

      # https://github.com/johnwason/vcpkg-action/blob/master/action.yml
      - name: checkout-vcpkg
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.determine-checkout-revision.outputs.vcpkg-revision }}'
          fetch-depth: ${{ inputs.fetch-depth }}
      - name: bootstrap-vcpkg-win
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}\vcpkg
        run: |
          ./bootstrap-vcpkg.bat -disableMetrics
          mkdir -p "${{ github.workspace }}/vcpkg_cache"
      - name: bootstrap-vcpkg-unix
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}/vcpkg
        run: |
          ./bootstrap-vcpkg.sh -disableMetrics
          mkdir -p "${{ github.workspace }}/vcpkg_cache"
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt install libxi-dev libxtst-dev  libx11-dev libxft-dev libxext-dev  libc-dev  libxrandr-dev  libltdl-dev  autoconf automake autoconf-archive
        #                  at-spi2-core           cairo                              gettext.. gtk            libxcrypt    vcpkg-make
      - name: vcpkg-dry-run
        # first time run will have some init output
        run: |
          "${{ github.workspace }}/vcpkg/vcpkg" install --dry-run --triplet ${{ matrix.config.vcpkg_triplet }}
          "${{ github.workspace }}/vcpkg/vcpkg" install --dry-run --triplet ${{ matrix.config.vcpkg_triplet }} > vcpkg_dry_run.txt
      # VCPKG_BINARY_SOURCES isn't worked now
      # https://github.com/microsoft/vcpkg/issues/45073
      - name: Vcpkg Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: cache-build-${{ matrix.config.vcpkg_triplet }}-${{ hashFiles('vcpkg_dry_run.txt', 'vcpkg.json') }}
          restore-keys: |
            cache-build-${{ matrix.config.vcpkg_triplet }}-
      - name: vcpkg-install
        run: |
          "${{ github.workspace }}/vcpkg/vcpkg" install --triplet ${{ matrix.config.vcpkg_triplet }}
      - name: vcpkg-export
        run: |
          cat vcpkg_installed/vcpkg/info/onnxruntime*.list vcpkg_installed/vcpkg/info/opencv4*.list > filelist.txt
          mkdir vcpkg_exported
          rsync --files-from filelist.txt vcpkg_installed vcpkg_exported
      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: prebuilt-${{ matrix.config.vcpkg_triplet }}
          path: ${{ github.workspace }}/vcpkg_exported/${{ matrix.config.vcpkg_triplet }}
          if-no-files-found: error
      - name: Output artifact ID
        run:  echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
